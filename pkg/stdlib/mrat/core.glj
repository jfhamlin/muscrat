(ns mrat.core
  (:import (github.com$glojurelang$glojure$pkg$lang *Ratio *BigInt)
           (github.com$jfhamlin$muscrat$pkg$ugen NewConstant
                                                 NewSum
                                                 NewProduct
                                                 NewFMA
                                                 NewFMAStatic
                                                 NewQuotient
                                                 NewAbs
                                                 NewExp
                                                 NewPow
                                                 NewCopySign
                                                 NewFreqRatio
                                                 NewMIDIFreq
                                                 NewImpulse
                                                 SimpleUGenFunc
                                                 WithInterp
                                                 WithDefaultDutyCycle
                                                 InterpNone
                                                 InterpLinear
                                                 InterpCubic)
           (github.com$jfhamlin$muscrat$pkg$wavtabs Table)
           (github.com$jfhamlin$muscrat$pkg$osc NewSine
                                                NewSaw
                                                NewTri
                                                NewPulse
                                                NewPhasor
                                                NewLFSaw
                                                NewLFPulse)
           (github.com$jfhamlin$muscrat$pkg$stochastic NewRRand
                                                       NewNoise
                                                       NewNoiseQuad
                                                       NewPinkNoise)
           (github.com$jfhamlin$muscrat$pkg$mod NewEnvelope
                                                WithReleaseNode
                                                WithInterpolation)
           (github.com$jfhamlin$muscrat$pkg$effects NewAmplitude
                                                    NewFreeverb
                                                    NewBitcrusher
                                                    NewLimiter
                                                    NewLowpassFilter
                                                    NewRLPF
                                                    NewRHPF
                                                    NewBPF
                                                    NewLoShelf
                                                    NewHiShelf
                                                    NewPeakEQ
                                                    NewDelay
                                                    NewTapeDelay
                                                    NewWaveFolder
                                                    NewClip)
           (github.com$jfhamlin$muscrat$pkg$sampler NewSampler
                                                    LoadSample)
           (github.com$jfhamlin$muscrat$pkg$aio NewInputDevice
                                                NewSoftwareKeyboard
                                                NewMIDIInputDevice
                                                WithVoices
                                                WithDeviceID
                                                WithDeviceName
                                                WithChannel
                                                WithController
                                                WithDefaultValue
                                                NewWavOut)
           (github.com$jfhamlin$freeverb-go NewRevModel)))

(def SAMPLE-RATE github.com$jfhamlin$muscrat$pkg$conf.SampleRate)
(def BUFFER-SIZE github.com$jfhamlin$muscrat$pkg$conf.BufferSize)
(def SAMPLE-FILE-PATHS github.com$jfhamlin$muscrat$pkg$conf.SampleFilePaths)

(defmacro doseq-idx
  [[locals seq-expr] & body]
  `(let [s# ~seq-expr]
     (doseq [~locals (map vector s# (range (count s#)))]
       ~@body)))

(def ^:private next-id (atom 0))
(defn- gen-id
  "Generate a new unique id."
  []
  (str (swap! next-id inc)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Graph

;;; I am rewriting this file to produce an intermediate representation
;;; of the graph, which can then be used to generate the actual
;;; graph. This will allow us to do some optimizations and also to
;;; generate the graph in a more flexible way.

(def ^:dynamic *graph* (atom {:nodes [] :edges []}))

(defn- sinks
  "Return the sink nodes of the graph."
  [graph]
  (->> graph
       :nodes
       (filter :sink)
       (map :id)))

(defn- outputs
  "Return the output nodes of the graph. Outputs are sinks whose :ug type is :out."
  [graph]
  (->> graph
       :nodes
       (filter (fn [{:keys [sink type]}] (or sink (= type :out))))
       (map :id)))

(defprotocol AsNode
  "Protocol for types that can be converted to generator nodes."
  (as-node [ug]))

(defn is-node?
  [x]
  (boolean (and (map? x) (:id x))))

(declare add-edge!)
(declare constant-node)

(defn add-node!
  [type ctor & {:keys [key args sink in-edges]}]
  (let [node {:id (gen-id)
              :type type
              :ctor ctor
              :args args
              :key key
              :sink sink}]
    (swap! *graph* update-in [:nodes] conj node)
    (doseq [[port val] in-edges]
      (add-edge! (as-node val) node (name port)))
    node))

(defn add-edge!
  [{x-id :id} {y-id :id} port]
  (let [edge {:from x-id :to y-id :port port}]
    (swap! *graph* update-in [:edges] conj edge)
    edge))

(extend-protocol AsNode
  github.com$glojurelang$glojure$pkg$lang.IPersistentMap
  (as-node [n] n))

(extend-protocol AsNode
  go/float64
  (as-node [x] (constant-node x)))

(extend-protocol AsNode
  go/int64
  (as-node [x] (constant-node x)))

(extend-protocol AsNode
  go/int
  (as-node [x] (constant-node x)))

(extend-protocol AsNode
  go/bool
  (as-node [x]
    (let [val (if x 1 0)]
      (constant-node val))))

(extend-protocol AsNode
  *BigInt
  (as-node [x] (constant-node x)))

(extend-protocol AsNode
  *Ratio
  (as-node [x] (constant-node x)))

(defn play
  [channels]
  (let [channels (if-not (or (seq? channels)
                             (vector? channels)) [channels channels] channels)
        channels (if (= (count channels) 0) [0 0] channels)
        channels (if (= (count channels) 1) [(first channels) (first channels)] channels)
        ch-inds (map vector channels (range (count channels)))
        find-or-create-sink (fn [i]
                              (let [outputs (filter #(= (:type %) :out) (:nodes @*graph*))
                                    sink (first (filter #(= (first (:args %)) i) outputs))]
                                (if sink
                                  sink
                                  (add-node! :out nil :args [i] :sink true))))]
    (doseq [[ch i] ch-inds]
      (let [gen (as-node ch)
            sink (find-or-create-sink i)]
        ;; port name doesn't matter for out nodes
        (add-edge! gen sink (str "in" (count (:nodes @*graph*))))))))

(defn- constant-node
  [x]
  (add-node! :const NewConstant :args [(double x)]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Utilities

(defn pow
  "Returns b^p. If b or p are nodes, creates a new node that computes b^p. Else,
  returns the result of b^p directly. pow extends exponentiation to
  allow for a negative base with a non-integral exponent, returning
  -((-b)^p) when b is negative."
  [b p]
  (if (some (partial is-node?) [b p])
    (add-node! :pow NewPow :in-edges {"base" b "exp" p})
    (if (neg? b)
      (- (math.Pow (- b) p))
      (math.Pow b p))))

(defn sine
  "Returns sin(theta). If theta is a node, creates a new node that
  computes sin(theta). Else, returns the result of sin(theta)
  directly."
  [theta]
  (if (is-node? theta)
    (add-node! :sine github.com$jfhamlin$muscrat$pkg$ugen.NewSine :in-edges {:in theta})
    (math.Sin theta)))

(defn abs
  "Returns the absolute value of x. If x is a node, creates a new node
  that computes the absolute value of x. Else, returns the absolute
  value of x directly."
  [x]
  (if (is-node? x)
    (add-node! :abs NewAbs :in-edges {:in x})
    (math.Abs x)))

(defn exp
  "Returns e^x. If x is a node, creates a new node that computes e^x.
  Else, returns e^x directly."
  [x]
  (if (is-node? x)
    (add-node! :exp NewExp :in-edges {:in x})
    (math.Exp x)))

(defn copy-sign
  "Returns x with the sign of s. If x or s are nodes, creates a new node
  that computes x with the sign of s. Else, returns x with the sign of
  s directly."
  [x s]
  (if (or (is-node? x) (is-node? s))
    (add-node! :copy-sign NewCopySign :in-edges {"in" x "sign" s})
    (math.Copysign x s)))

(defn- freq-ratio
  [x kind]
  (add-node! :freq-ratio NewFreqRatio :args [kind] :in-edges {"in" x}))

(defn dbamp
  "Return the amplitude ratio corresponding to the given decibel value."
  [db]
  (if (is-node? db)
    (freq-ratio db "decibels")
    (pow 10 (/ db 20.0))))

(defn cents
  "Return the frequency ratio corresponding to the given number of
  cents."
  [x]
  (if (is-node? x)
    (freq-ratio x "cents")
    (pow 2 (/ x 1200.0))))

(defn semitones
  "Return the frequency ratio corresponding to the given number of
  semitones."
  [x]
  (if (is-node? x)
    (freq-ratio x "semitones")
    (pow 2 (/ x 12.0))))

(defn octaves
  "Return the frequency ratio corresponding to the given number of
  octaves."
  [x]
  (if (is-node? x)
    (freq-ratio x "octaves")
    (pow 2 x)))

(defn mtof
  "Return the frequency corresponding to the given MIDI note number."
  [note]
  (if (is-node? note)
    (add-node! :midifreq NewMIDIFreq :in-edges {"in" note})
    (* 440.0 (pow 2 (/ (- note 69.0) 12.0)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Helper for custom sample generators

(defn ugen-fn
  "Returns a UGenFunc that wraps the given function. The function should
  take a map of configuration parameters and an output buffer, and
  write samples to the output buffer."
  [f]
  (let [wrapped (fn [cfg out]
                  (f {:sample-rate-hz (.SampleRateHz cfg)
                      :input-samples (.InputSamples cfg)}
                     out))]
    (SimpleUGenFunc wrapped)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Operators

(defn- seq-or-vec?
  [x]
  (or (seq? x) (vector? x)))

(defn- arrange-multi-channel-args
  "Arrange a collection of arguments, some of which may be collections,
  into a sequence of sequences, where the i-th subsequence is an
  arguments sequence composed of the i-th element of each argument
  collection, wrapping around the collection for those shorter than
  the collection with maximum length.

  For example:
    (arrange-multi-channel-args [[1 2 3] [4 5] [6 7 8 9]])
  returns:
    ([1 4 6] [2 5 7] [3 4 8] [1 5 9])"
  [args]
  (let [colls (map #(if (seq-or-vec? %) % [%]) args)
        colls-counts (map count colls)
        max-len (apply max 0 colls-counts)
        colls (map #(take max-len (cycle %)) colls)]
    (if (empty? colls)
      '([])
      (apply map vector colls))))

(defn- +-internal
  [& xs]
  (let [groups (group-by #(is-node? %) xs)
        nums (get groups false ())
        ugens (get groups true ())
        num-sum (apply glojure.core/+ nums)]
    (if (empty? ugens)
      num-sum
      (let [sum-node (add-node! :+ NewSum)
            nodes (if (zero? num-sum)
                    ugens
                    (conj ugens (constant-node num-sum)))]
        (doseq [[n i] (map vector nodes (range (count nodes)))]
          (add-edge! n sum-node (str \$ i)))
        sum-node))))

(defn +
  "Return the sum of any combination of numbers or ugens.
  If any argument to + is a node, then the result of + is a node.  If
  any argument to + is a collection, then the result is a collection
  whose length is the length of the longest collection (max-len) and
  where the elements of each argument are added pairwise. Any
  non-collections are duplicated to max-len, and any collections
  shorter than max-len are cycled up to max-len."
  ([] 0)
  ([x] x)
  ([x & more]
   (let [args (cons x more)]
     (if (some seq-or-vec? args)
       (let [colls (map #(if (seq-or-vec? %) % [%]) args)
             max-len (apply max (map count colls))
             colls (map #(take max-len (cycle %)) colls)]
         (apply map + colls))
       (apply +-internal args)))))

(declare *)

(defn -
  "Return the difference of any combination of numbers or ugens.
  If any argument to - is a node, then the result of - is a node"
  ([] 0)
  ([x] (* -1 x))
  ([x & more] (+ x (apply + (map #(* -1 %) more)))))

(defn- *-internal
  [& xs]
  (let [groups (group-by #(is-node? %) xs)
        nums (get groups false ())
        ugens (get groups true ())
        num-prod (apply glojure.core/* nums)]
    (if (empty? ugens)
      num-prod
      (let [prod-node (add-node! :* NewProduct)
            nodes (conj ugens (constant-node num-prod))]
        (doseq [[n i] (map vector nodes (range (count nodes)))]
          (add-edge! n prod-node (str \$ i)))
        prod-node))))

(defn *
  "Return the product of any combination of numbers or ugens.
  If any argument to * is a node, then the result of * is a node."
  ([] 1)
  ([x] x)
  ([x & more]
   (let [args (cons x more)]
     (if (some seq-or-vec? args)
       (let [colls (map #(if (seq-or-vec? %) % [%]) args)
             max-len (apply max (map count colls))
             colls (map #(take max-len (cycle %)) colls)]
         (apply map * colls))
       (apply *-internal args)))))

(defn- div-internal
  [& xs]
  (if (every? #(not (is-node? %)) xs)
    (apply glojure.core// xs)
    (let [quot-node (add-node! :/ NewQuotient)
          nodes (map as-node xs)]
      (doseq [[n i] (map vector nodes (range (count nodes)))]
        (add-edge! n quot-node (str \$ i)))
      quot-node)))

(defn /
  "Return the quotient of any combination of numbers or ugens.
  If any argument to / is a node, then the result of / is a node."
  ([x] (/ 1 x))
  ([x & more]
   (let [args (cons x more)]
     (if (some seq-or-vec? args)
       (let [colls (map #(if (seq-or-vec? %) % [%]) args)
             max-len (apply max (map count colls))
             colls (map #(take max-len (cycle %)) colls)]
         (apply map / colls))
       (apply div-internal args)))))

(defn sum
  [coll] (apply + coll))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; macros

(defn fma
  "A fused multiply and add ugen."
  [in mul add]
  (if (seq-or-vec? in) ;; handle multiple channels
    (map #(fma % mul add) in)
    (if (and (every? number? [mul add])
             (== mul 1)
             (== add 0))
      in ;; no-op
      (let [node (if (every? number? [mul add])
                   (add-node! :fma NewFMAStatic :args [mul add]) ;; optimized for static mul and add
                   (let [n (add-node! :fma NewFMA)]
                     (add-edge! (as-node mul) n "mul")
                     (add-edge! (as-node add) n "add")
                     n))]
        (add-edge! (as-node in) node "in")
        node))))

(defmacro defugen
  "Defines a new generator node constructor with semantics similar to defn,
  but with specific constraints and enhancements for argument
  handling.  This macro allows only a single arity and requires the
  argument vector to be defined in pairs. Each pair consists of an
  argument name followed by its default value. When the resulting
  function is called, all parameters are optional; unprovided
  parameters default to their specified values. Additionally, callers
  can provide arguments out of their original order or skip certain
  arguments by using keyword-value pairs, where the keyword matches
  the argument name. This feature offers flexibility in how arguments
  are passed to the function, allowing for more dynamic and adaptable
  function calls."
  [name & decl]
  (let [[doc args & body] (if (string? (first decl))
                            decl
                            (cons "" decl))
        arg-pairs (partition 2 args)
        arg-names (mapv (comp keyword first) arg-pairs)
        ;; noexpands are the arguments that don't support multi-channel expansion
        ;; they are denoted by names with {:noexpand true} in metadata
        noexpands (into #{} (->> arg-pairs
                                (map first)
                                (filter (comp :noexpand meta))
                                (map keyword)))
        defaults (into {} (map (fn [[k v]] [(keyword k) v]) arg-pairs))
        allowed-keys (merge (set (keys defaults)) :mul :add)
        assignments-sym (gensym "assignments")]
    `(defn ~name ~doc [& args#]
       (let [defaults# ~defaults
             ~assignments-sym (loop [assignments# {}
                                     arg-names# ~arg-names
                                     args# args#]
                                (if (or (empty? args#)
                                        (contains? ~allowed-keys (first args#)))
                                  (merge assignments# (apply hash-map args#))
                                  (if (empty? arg-names#)
                                    (throw (errors.New "too many positional arguments"))
                                    (recur (assoc assignments# (first arg-names#) (first args#))
                                           (rest arg-names#)
                                           (rest args#)))))
             ~assignments-sym (merge defaults# ~assignments-sym)
             ;; duplicate the argument pairs for each argument value
             ;; to handle multiple channels.
             expand-arg# (fn [[k# v#]] (if (and (not (contains? ~noexpands k#))
                                                (seq-or-vec? v#))
                                         (map #(vector k# %) v#)
                                         [[k# v#]]))
             arg-lists# (arrange-multi-channel-args (map expand-arg# (seq ~assignments-sym)))
             channels# (for [arg-list# arg-lists#]
                         (let [~assignments-sym (into {} arg-list#)
                               ~@(mapcat (fn [[arg-name default]]
                                           `(~arg-name (get ~assignments-sym ~(keyword arg-name))))
                                         arg-pairs)
                               ugen# (do ~@body)
                               mul# (get ~assignments-sym :mul 1)
                               add# (get ~assignments-sym :add 0)]
                           (fma ugen# mul# add#)))]
         (if (= 1 (count channels#))
           (first channels#)
           channels#)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Oscillators

(def default-freq 440)

(defn- validate-flags
  [flags defaults]
  (if (odd? (count flags))
    (throw (apply str "odd number of flag args: " (interpose \, flags))))
  (let [m (reduce #(apply assoc %1 %2) {} (partition 2 flags))
        unsupported (seq (remove (set (keys defaults)) (keys m)))]
    (if unsupported (throw (apply str "unsupported option(s) supplied: "
                                  (interpose \, unsupported))))
    (merge defaults m)))

(defn- handle-extra-gen-args
  [node args-map]
  (doseq [[k v] args-map]
    (let [gen (as-node v)
          param (k {:iphase "iphase"
                    :phase "phase"
                    :sync "sync"
                    :duty "dc"})]
      (when (nil? param) (throw (fmt.Errorf "handle-extra-gen-args: unknown parameter: %s" k)))
      (add-edge! gen node param))))

(defmacro defosc
  [name ctor & {:keys [default-duty] :or {default-duty 1}}]
  (let [opt-args '[duty iphase sync phase]]
    `(defugen ~name
       [~'freq default-freq
        ~@(mapcat #(vector % nil) opt-args)]
       (let [wt-opts# [(~'WithDefaultDutyCycle ~default-duty)]
             type# ~(keyword name)
             osc-node# (add-node! type# ~ctor :args wt-opts#)
             freq-node# (as-node ~'freq)
             extra-args# ~(mapv #(vector (keyword %) %) opt-args)
             extra-args# (into {} (remove (comp nil? second) extra-args#))]
         (add-edge! freq-node# osc-node# "w")
         (handle-extra-gen-args osc-node# extra-args#)
         osc-node#))))

(defosc sin NewSine)
(defosc saw NewSaw)
(defosc tri NewTri)
(defosc phasor NewPhasor)

(defosc pulse NewPulse :default-duty 0.5)
(defosc sqr NewPulse :default-duty 0.5)

(defosc lfsaw NewLFSaw)
(defosc lfpulse NewLFPulse :default-duty 0.5)
(defosc lfsqr NewLFPulse :default-duty 0.5)

(defugen impulse
  [freq default-freq
   iphase nil]
  (let [iphase (if iphase (as-node iphase))
        freq-node (as-node freq)
        node (add-node! :impulse NewImpulse)]
    (if iphase (add-edge! iphase node "iphase"))
    (add-edge! freq-node node "w")
    node))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Noise/Randomness

(defugen noise
  "Generates random values between -1 and 1 at the given frequency.
  If frequency is zero or not provided, generates white
  noise."
  [freq 0]
  (add-node! :noise NewNoise :in-edges {:w freq}))

(defugen pink-noise
  []
  (add-node! :pink-noise NewPinkNoise))

(defugen noise-quad
  "Generates quadratically-interpolated random values between -1 and 1
  at the given frequency. If frequency is zero or not provided,
  generates at 500 hz."
  [freq 500]
  (add-node! :noise-quad NewNoiseQuad :in-edges {:w freq}))

(defugen rrand
  "Generates random values between the given min and max values
  when triggered."
  [min 0
   max 1
   trig 1
   ^:noexpand seed 0]
  (let [add min
        mul (- max min)
        rnd (math$rand.New (math$rand.NewSource seed))]
    (if (and (number? trig) (> trig 0))
      (fma (.Float64 rnd) mul add)
      (add-node! :rrand NewRRand :args [rnd] :in-edges {:min min :max max :trig trig}))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Modulators

(defn env
  [gate levels times & flags]
  (let [flags (validate-flags flags {:interp :lin, :release-node -1})
        trigger (as-node gate)
        levels (map as-node levels)
        times (map as-node times)]
    (if (not= (count levels) (inc (count times)))
      (throw (str "env expects the number of levels to be one more than the number of times, got " (count levels) " levels and " (count times) " times.")))
    (let [env-node (add-node! :envelope NewEnvelope
                              :args [(WithInterpolation (subs (str (:interp flags)) 1))
                                     (WithReleaseNode (:release-node flags))])]
      (add-edge! trigger env-node "trigger")
      (doseq [[n i] (map vector levels (range (count levels)))]
        (add-edge! n env-node (str "level$" i)))
      (doseq [[n i] (map vector times (range (count times)))]
        (add-edge! n env-node (str "time$" i)))
      env-node)))

;; alias for env
(def envelope env)

(defn env-asr
  [gate [a s r]]
  (env gate [0 s 0] [a r] :release-node 1))

(defn env-adsr
  [gate [a d s r]]
  (env gate [0 1 s 0] [a d r] :release-node 2))

(defn env-perc
  [gate [a d]]
  (env gate [0 1 0] [a d]))

(defugen line
  "Generates a line from the start value to the end value over the given
  duration."
  [start 0
   end 1
   dur 1]
  (env 1 [start end] [dur] :interp :lin))

(defugen xline
  "Generates an exponential curve from the start value to the end
  value. Both the start and end values must be non-zero and have the
  same sign."
  [start 1
   end 2
   dur 1]
  (env 1 [start end] [dur] :interp :exp))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Filters and Effects

(defugen amplitude
  [in 0
   attack-time 0.01
   release-time 0.01]
  (add-node! :amplitude NewAmplitude :args [attack-time release-time] :in-edges {:in in}))

(defugen limiter
  "Limits the input amplitude to the given level. Limiter will not
  overshoot, but it needs to look ahead in the audio. Thus there is a
  delay equal to twice the value of the dur parameter.

  Limiter is completely transparent for an in range signal.

  in - The signal to be processed.
  level - The peak output amplitude level to which to normalize the input.
  dur - aka lookAheadTime. The buffer delay time. Shorter times will
        produce smaller delays and quicker transient response times, but may
        introduce amplitude modulation artifacts."
  [in 0
   level 1
   dur 0.01]
  (add-node! :limiter
             NewLimiter
             :args [dur]
             :in-edges {:in in
                        :amp level}))

(defn pipe
  "Create a pipe, which copies the input to the output. The input may be
  set with pipeset!. This is useful for creating feedback loops."
  []
  (let [f (fn [cfg out]
            (when-let [in (get (:input-samples cfg) "in")]
              (go/copy out in)))]
    (add-node! :pipe ugen-fn :args [f])))

(defn pipeset!
  "Set the input of a pipe."
  [p in]
  (add-edge! (as-node in) p "in"))

(defugen freeverb
  [in 0
   mix 1/3
   room-size 0.5
   damp 0.5]
  (let [model (NewRevModel)]
    (add-node! :freeverb
               #(NewFreeverb model)
               :in-edges {:in in
                          :mix mix
                          :room-size room-size
                          :damp damp})))

(defugen lores
  "A simple lowpass filter with cutoff and resonance, modeled after the
  Max/MSP lores~ object."
  [in 0
   freq 1200
   reson 0]
  (add-node! :lores NewLowpassFilter
             :in-edges {:in in
                        :cutoff freq
                        :resonance reson}))

(defugen rlpf
  "A resonant low-pass filter."
  [in 0
   freq 440
   rq 1]
  (add-node! :rlpf NewRLPF
             :in-edges {:in in
                        :freq freq
                        :reson rq}))

(defugen rhpf
  "A resonant high-pass filter."
  [in 0
   freq 440
   rq 1]
  (add-node! :rhpf NewRHPF
             :in-edges {:in in
                        :freq freq
                        :reson rq}))

(defugen bpf
  "A simple bandpass filter with center frequency and bandwidth.
   n - the input signal
   freq - the center frequency in hertz
   rq - the width of the filter, as a coefficient bandwidth/freq"
  [in 0
   freq 440
   rq 1]
  (add-node! :bpf NewBPF
             :in-edges {:in in
                        :w freq
                        :bw rq}))

(defugen loshelf
  [in 0
   freq 1200
   rs 1
   db 0]
  (add-node! :loshelf NewLoShelf
             :in-edges {:in in
                        :w freq
                        :rs rs
                        :db db}))

(defugen hishelf
  [in 0
   freq 1200
   rs 1
   db 0]
  (add-node! :hishelf NewHiShelf
             :in-edges {:in in
                        :w freq
                        :rs rs
                        :db db}))

(defugen peakeq
  [in 0
   freq 1200
   rq 1
   db 0]
  (add-node! :peakeq NewPeakEQ
             :in-edges {:in in
                        :w freq
                        :rq rq
                        :db db}))

(defn- -delay
  [in max-delay-time delay-time interp-opt]
  (add-node! :delay NewDelay :args [max-delay-time (WithInterp interp-opt)]
             :in-edges {:in in
                        :delay delay-time}))

(defugen delayn
  "Delay line with no interpolation."
  [in 0
   max-delay-time 0.2
   delay-time 0.2]
  (-delay in max-delay-time delay-time InterpNone))

(defugen delayl
  "Delay line with linear interpolation."
  [in 0
   max-delay-time 0.2
   delay-time 0.2]
  (-delay in max-delay-time delay-time InterpLinear))

(defugen delayc
  "Delay line with cubic interpolation."
  [in 0
   max-delay-time 0.2
   delay-time 0.2]
  (-delay in max-delay-time delay-time InterpCubic))

(defugen tape-delayl
  "Tape delay line with linear interpolation. This generator simulates
  a tape read head such that changes to the delay value are not
  instantaneous - the 'tape' is sped up or slowed down to reach the
  target delay time."
  [in 0
   delay-time 0.2]
  (add-node! :tape-delay NewTapeDelay
             :in-edges {:$0 in
                        :delay delay-time}))

(defn- comb-feedback
  [delay-time decay-time]
  (if (or (and (not (is-node? delay-time)) (zero? delay-time))
          (and (not (is-node? decay-time)) (zero? decay-time)))
    0.0
    (let [abs-decay (abs decay-time)
          power (/ (* (math.Log 0.001) delay-time) abs-decay)
          absret (exp power)]
      (copy-sign absret decay-time))))

(defn- -comb
  [in max-delay-time delay-time decay-time delay-fn]
  (let [feedback (pipe)
        delay (delay-fn feedback max-delay-time delay-time)
        fb-coefficient (comb-feedback delay-time decay-time)
        comb (+ in (* fb-coefficient delay))]
    (pipeset! feedback comb)
    comb))

(defugen combn
  "Comb filter with no interpolation."
  [in 0
   max-delay-time 0.2
   delay-time 0.2
   decay-time 1]
  (-comb in max-delay-time delay-time decay-time delayn))

(defugen combl
  "Comb filter with linear interpolation."
  [in 0
   max-delay-time 0.2
   delay-time 0.2
   decay-time 1]
  (-comb in max-delay-time delay-time decay-time delayl))

(defugen combc
  "Comb filter with cubic interpolation."
  [in 0
   max-delay-time 0.2
   delay-time 0.2
   decay-time 1]
  (-comb in max-delay-time delay-time decay-time delayc))

(defugen clip
  "Clip an input signal when it exceeds threshold low/high values."
  [in 0
   lo -1
   hi 1]
  (if (some (partial is-node?) [in lo hi])
    (add-node! :clip NewClip
               :in-edges {:in in
                          :lo lo
                          :hi hi})
    (-> in
        (max lo)
        (min hi))))

(defugen pan2
  "A two-channel, equal-power panner."
  [in 0
   pos 0
   level 1]
  (let [pos (clip pos)
        pi4 (* math.Pi 0.25)
        pi2 (* math.Pi 0.5)
        theta (+ (* pi4 pos) pi4)
        lamp (* level (sine (- pi2 theta)))
        ramp (* level (sine theta))]
    [(* in lamp)
     (* in ramp)]))

(defugen wfold
  "Fold an input signal when it exceeds threshold low/high values.
  The signal is reflected across the low and high threshold values.
  Default low and high are -1 and 1."
  [in 0
   lo -1
   hi 1]
  (add-node! :wfold NewWaveFolder
             :in-edges {:in in
                        :lo lo
                        :hi hi}))

(defugen bitcrush
  "Bitcrush an input signal."
  [in 0
   bits 24
   rate 44100]
  (add-node! :bitcrush NewBitcrusher
             :in-edges {:in in
                        :rate rate
                        :bits bits}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Sampler

(defn find-sample-path
  "find-sample-path searches the directory given by the env var
  MUSCRAT_SAMPLE_PATH for a sample file whose base name matches the
  given keyword. If the sample is not found, an error is thrown.

  Supports the following file extensions: .wav, .aiff, .aif, .flac,"
  [kw]
  (letfn [(file-exists? [file] (some? (first (os.Stat file))))]
    (let [supported-suffixes [".wav" ".aiff" ".aif" ".flac" ".mp3"]
          sample-path SAMPLE-FILE-PATHS
          sample-path (if (empty? sample-path)
                        (throw (errors.New "no sample paths defined"))
                        sample-path)
          sample-path (map #(strings.TrimRight % "/") sample-path)
          matches (for [path sample-path
                        suffix supported-suffixes
                        file [(str path "/" (name kw) suffix)]
                        :when (file-exists? file)]
                    file)]
      (if (empty? matches)
        (throw (errors.New (str "sample not found: " kw)))
        (first matches)))))

(defn load-sample
  "Load an audio sample from a file into a buffer (slice of float64s) or
  a slice of buffers for multi-channel audio. The buffer will be
  resampled from the source to the engine's sample rate (available in
  the SAMPLE-RATE var). See play-buf for an example of how to play a
  loaded sample."
  [path-or-kw]
  (if (keyword? path-or-kw)
    (load-sample (find-sample-path path-or-kw))
    (LoadSample path-or-kw)))

(defugen play-buf
  "Play a buffer (single-channel) or slice of buffers (multi-channel)."
  [^:noexpand buf-or-bufs nil
   rate 1
   trigger 1
   start-pos 0
   loop 0]
  (let [buf-or-bufs (if (keyword? buf-or-bufs)
                      (load-sample buf-or-bufs)
                      buf-or-bufs)]
      (when-not (pos? (count buf-or-bufs))
        (throw (errors.New "play-buf requires a non-empty buffer or slice of buffers")))
    (let [bufs (if (#(or (number? %) (keyword? %)) (first buf-or-bufs))
                 [buf-or-bufs] ;; wrap single buffer in a vector
                 buf-or-bufs)]
      (for [buf bufs]
        (let [buf (if (keyword? buf)
                    (load-sample buf)
                    buf)]
          (add-node! :play-buf NewSampler
                     :args [buf]
                     :in-edges {:trigger trigger
                                :rate rate
                                :start-pos start-pos
                                :loop (or loop 0)}))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; I/O devices

(defugen sound-in
  []
  (add-node! :in NewInputDevice))

(defn qwerty-in
  [name & {:keys [voices]}]
  (let [num-voices (or voices 1)
        opts [(WithVoices num-voices)]
        kb (apply NewSoftwareKeyboard name opts)]
    (map (fn [i]
           {:note (add-node! :swkb-note #(.Note %1 %2) :args [kb i])
            :onoff (add-node! :swkb-gate #(.Gate %1 %2) :args [kb i])})
         (range num-voices))))

(defn midi-in
  "Registers one or more input ugens that emit values from MIDI events.
  The 'name' argument is a user-defined name for the input, which is
  used to identify the input in the user interface. The 'typ' argument
  is the type of event to track, one of:

  - :note - returns a seq, one element per voice (see flags), of
     maps with elements for note on/off (1/0), midi note number, and
     velocity: {:onoff <node> :note <node> :velocity <node>}
  - :bend - returns a single ugen node for the pitch bend value
  - :cc - returns a single ugen node for a single controller change
    value.
  - :after-touch - returns a single ugen node for mono aftertouch

  # Voices

  The :note input type is monophonic by default, with a single set of
  ugens tracking the latest note. To enable polyphony, provide the
  number of voices with the :voices flag. Notes on the mapped channel
  will be automatically allocated across the returned voices.

  # Device Mappings

  Input ugens can be (re-)mapped in the user interface, but the
  default mapping can be controlled with the following flags:

  - :device-id - The MIDI device ID, or a seq of IDs. If a seq, the
    first matching device in the seq is used. Default is 0.
  - :device-name - A regular expression to match against the device
    name.
  - :channel - The channel to map to. Default is 0.
  - :controller - For :cc type, the controller ID to map to. Default
    is 0."
  [name typ & flags]
  (let [_ (if-not (contains? #{:note :bend :cc :after-touch} typ)
            (throw (fmt.Errorf "unsupported midi-in type: %s" typ)))
        flags (validate-flags flags {:voices 1
                                     :device-id 0
                                     :device-name nil
                                     :channel 0
                                     :controller 0
                                     :default 0})
        num-voices (:voices flags)
        opts [(WithVoices num-voices)
              (WithDeviceID (:device-id flags))
              (WithChannel (:channel flags))
              (WithController (:controller flags))
              (WithDefaultValue (:default flags))]
        opts (if-let [name (:device-name flags)]
               (conj opts (WithDeviceName name))
               opts)
        dev (apply NewMIDIInputDevice name opts)]
    (case typ
      :note     (map (fn [i] {:note (add-node! :midi-in-note #(.Note %1 %2) :args [dev i])
                              :onoff (add-node! :midi-in-gate  #(.Gate %1 %2) :args [dev i])})
                     (range num-voices))
      :cc (add-node! :midi-in-cc #(.Control %) :args [dev])
      (throw (fmt.Errorf "unsupported midi-in type: %s" typ))
      )))

(defugen wavout
  "Save the input to a 32-bit wav file (up to two channels) named by
  the :filename flag (default out.wav)."
  [^:noexpand chs 1
   filename "out.wav"]
  (let [chs (if (seq-or-vec? chs) chs [chs])
        _ (if (> (count chs) 2) (throw (str "wavout: too many channels supplied: " (count chs))))
        ch0 (first chs)
        ch1 (second chs)
        node (add-node! :wavout NewWavOut :args [filename]
                        :sink true
                        :in-edges {:$0 ch0})]
    (when-let [ch1 (second chs)]
      (add-edge! (as-node ch1) node "$1"))
    node))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Pattern utilities

(defn clock-grid
  "Generates an impulse given beats per minute and a number of impulses
  per beat. The impulses are emitted evenly over the beat."
  [bpm res & flags]
  (let [bps (/ bpm 60.0)]
    (apply impulse (* bps res) flags)))

(defn step
  "Cycle through a sequence of values on each trigger."
  [trig freqs]
  (let [node (add-node! :sequencer github.com$jfhamlin$muscrat$pkg$pattern.NewSequencer)
        trig (as-node trig)
        freqs (map as-node freqs)]
    (add-edge! trig node "trigger")
    (doseq-idx [[freq i] freqs]
               (add-edge! freq node (str \$ i)))
    node))

(defn trig-pattern
  [clock pattern]
  (let [s (sequencer clock pattern)]
    (* s clock)))

(defn choose
  "Pick randomly from a sequence of values, making a new choice on each
  trigger."
  [trig opts]
  (let [node (add-node! :choose github.com$jfhamlin$muscrat$pkg$pattern.NewChoose)
        trig (as-node trig)
        opts (map as-node opts)]
    (add-edge! trig node "trigger")
    (doseq-idx [[opt i] opts]
               (add-edge! opt node (str \$ i)))
    node))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; MIDI notes

(def ^:private note-names
  [["C" "B#"]
   ["C#" "Db"]
   ["D"]
   ["D#" "Eb"]
   ["E" "Fb"]
   ["F" "E#"]
   ["F#" "Gb"]
   ["G"]
   ["G#" "Ab"]
   ["A"]
   ["A#" "Bb"]
   ["B" "Cb"]])

(doseq [[note names] (map vector
                          (range 128)
                          (cycle note-names))]
  (let [octave-num (- (quot note 12) 1)]
    (doseq [name names]
      (eval
       `(def ~(symbol (str name octave-num)) ~note)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Scales

(def ionian [0 2 4 5 7 9 11])
(def dorian [0 2 3 5 7 9 10])
(def phrygian [0 1 3 5 7 8 10])
(def lydian [0 2 4 6 7 9 11])
(def mixolydian [0 2 4 5 7 9 10])
(def aeolian [0 2 3 5 7 8 10])
(def locrian [0 1 3 5 6 8 10])

(def major ionian)
(def minor aeolian)

(def major-pentatonic [0 2 4 7 9])
(def minor-pentatonic [0 3 5 7 10])

(def blues [0 3 5 6 7 10])

(def harmonic-minor [0 2 3 5 7 8 11])
(def melodic-minor [0 2 3 5 7 9 11])

(def chromatic (range 12))

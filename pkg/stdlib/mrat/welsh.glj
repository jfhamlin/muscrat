(ns mrat.welsh
  (:require [mrat.core :refer :all]))

(defn- get-flag
  [flags key default]
  (let [flag-map (apply hash-map flags)
        result (get flag-map key default)
        rest (dissoc flag-map key)]
    [result (flatten (seq rest))]))

(defn- mkosc
  [cfg freq & flags]
  (let [[pitch-flag flags] (get-flag flags :pitch 1)
        detune (* (get cfg :detune 1.0) pitch-flag)]
    (* (decibels (get cfg :mix 0))
       (apply (:wave cfg) (* detune freq) flags))))

(defn- lfo-flag
  [cfg osc-cfg lfo]
  (if (= :pitch (:route cfg))
    (let [depth (:depth cfg)
          unit (first depth)
          val (case unit
                :cents (cents (* lfo (second depth)))
                (throw (str "unsupported pitch depth unit: " scale)))]
      [:pitch val])
    (when-let [dst ((:route cfg) (:key osc-cfg))]
      (let [depth (dst (:depth cfg))
            osc-duty (get osc-cfg :duty 1)
            osc-amp (get osc-cfg :amp 1)
            val (case dst
                  :duty (+ osc-duty (* 0.5 depth lfo))
                  :amp (* osc-amp) ;; TODO
                  (throw (str "unsupported lfo destination: " dst)))]
        [dst val]))))

(defn- mklpf
  [cfg gate]
  (let [cutoff (:cutoff cfg)
        [a d s r] (:adsr cfg)
        init-level (:env cfg)
        lpf-env (if init-level
                  (* (env gate [init-level
                                1
                                (+ (* s (- 1 init-level)) init-level)
                                init-level]
                          [a d r] :release-node 2))
                  1.0)
        res (* lpf-env (:res cfg))
        cutoff (* 0.5 (+ (* lpf-env cutoff)
                         (* (- 1 lpf-env) 10000)))]
    (fn [sig] (lores sig cutoff res))))

(defn mkwelsh
  [cfg]
  (let [osc-cfg (:osc cfg)
        osc1-cfg (first osc-cfg)
        osc2-cfg (second osc-cfg)
        lfo-cfg (:lfo cfg)
        lpf-cfg (:lpf cfg)
        lpf-env (:env lpf-cfg)
        [a d s r] (:adsr cfg)
        a (max 0.001 a)]
    (fn [gate freq]
      (let [amp (env-adsr gate [a s d r])
            lfo ((:wave lfo-cfg) (:freq lfo-cfg))
            osc1-flags (lfo-flag lfo-cfg osc1-cfg lfo)
            osc2-flags (lfo-flag lfo-cfg osc2-cfg lfo)
            osc1 (apply mkosc osc1-cfg freq osc1-flags)
            osc2 (apply mkosc osc2-cfg freq osc2-flags)
            lpf (mklpf lpf-cfg gate)
            dry (+ osc1 osc2)]
        (* amp (-> (+ osc1 osc2)
                   (lpf)))))))

;; TODOs
;; - osc tracking

(def dark-city
  (mkwelsh
   {:osc [{:key :osc1
           :wave sqr
           :duty 0.5
           :detune (octaves -2)
           :mix 0}
          {:key :osc2
           :wave saw
           :detune (* (semitones -11) (cents -92))
           :mix 0}]
    :lfo {:route {:osc1 :duty
                  :osc2 :duty}
          :wave sin
          :freq 4
          :depth {:duty 0.45}}
    :lpf {:cutoff 300
          :res 0
          :env 0.75
          :adsr [5.15 6.35 0.5 5.20]}
    :adsr [0 3.9 0.7 6.35]}))

(def choir
  (mkwelsh
   {:osc [{:key :osc1
           :wave sqr
           :duty 0.15
           :detune (octaves -2)}
          {:key :osc2
           :wave sqr
           :duty 0.25}]
    :lfo {:route :pitch
          :wave tri
          :freq 2.4
          :depth [:cents 20]}
    :lpf {:cutoff 900
          :res 0.7}
    :adsr [0.32 0.1 1 0.93]}))

(def flute
  (mkwelsh
   {:osc [{:key :osc1
           :wave sqr
           :duty 0.25}]
    :lfo {:route {:osc1 :amp}
          :wave tri
          :freq 3.5
          :depth 0.07}
    :lpf {:cutoff 40
          :adsr [0.11 0.01 1 0.28]}
    :adsr [0.11 0.001 1 0.28]}))

;; (def growling-bass
;;   (mkwelsh
;;    {:osc [{:key :osc1
;;            :wave sqr
;;            :duty 0.5
;;            :detune (octaves -2)
;;            :mix 0}
;;           {:key :osc2
;;            :wave saw
;;            :detune (semitones -9)
;;            :mix 0}]
;;     :lpf {:cutoff 122
;;           :res 0}})) ;; todo

;; (def bongo
;;   (mkwelsh {:osc [{:key :osc1
;;                    :wave :tri
;;                    :mix 0}
;;                   {:key :osc2
;;                    :wave :sqr
;;                    :mix 0.65}]
;;             :lpf {:cutoff 600
;;                   :res 0
;;                   :env 0.6}
;;             :amp {:attack 0.0001
;;                   :decay 0.22
;;                   :sustain 0
;;                   :release 0.22}}))

(ns mrat.graph)

(defn simplify-graph
  "Simplify the graph.
  - Deduplicate constant nodes."
  [g]
  (let [nodes (:nodes g)
        const-nodes (filter #(= (:type %) :const) nodes)
        replacements (loop [nodes const-nodes
                            value-nodes {}
                            replacements {}]
                       (if (empty? nodes)
                         replacements
                         (let [{id :id [val] :args} (first nodes)
                               val (double val)
                               val-node (get value-nodes val)]
                           (if val-node
                             (recur (rest nodes)
                                    value-nodes
                                    (assoc replacements id val-node))
                             (recur (rest nodes)
                                    (assoc value-nodes val id)
                                    replacements)))))
        new-nodes (filter #(not (contains? replacements (:id %))) nodes)
        fix-edge (fn [edge]
                   (let [from (:from edge)
                         to (:to edge)]
                     (merge edge
                            {:from (get replacements from from)
                             :to (get replacements to to)})))
        new-edges (map fix-edge (:edges g))]
    (merge g {:nodes new-nodes :edges new-edges})))

// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as mrat$0 from "./pkg/mrat/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as ugen$0 from "./pkg/ugen/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @returns {Promise<(ugen$0.Knob | null)[]> & { cancel(): void }}
 */
export function GetKnobs() {
    let $resultPromise = /** @type {any} */($Call.ByID(2507447091));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<mrat$0.Symbol[]> & { cancel(): void }}
 */
export function GetNSPublics() {
    let $resultPromise = /** @type {any} */($Call.ByID(3036817141));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<number> & { cancel(): void }}
 */
export function GetSampleRate() {
    let $resultPromise = /** @type {any} */($Call.ByID(252701966));
    return $resultPromise;
}

/**
 * OpenFileDialog opens a file dialog.
 * @returns {Promise<$models.OpenFileDialogResponse | null> & { cancel(): void }}
 */
export function OpenFileDialog() {
    let $resultPromise = /** @type {any} */($Call.ByID(3758918700));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType5($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * PlayFile plays a file. The file is re-evaluated whenever it
 * changes.
 * @param {string} fileName
 * @returns {Promise<void> & { cancel(): void }}
 */
export function PlayFile(fileName) {
    let $resultPromise = /** @type {any} */($Call.ByID(4070899578, fileName));
    return $resultPromise;
}

/**
 * SaveFile saves a file. If the fileName is empty, a file dialog is
 * shown. Returns the filename and an error.
 * @param {string} fileName
 * @param {string} content
 * @returns {Promise<string> & { cancel(): void }}
 */
export function SaveFile(fileName, content) {
    let $resultPromise = /** @type {any} */($Call.ByID(150441729, fileName, content));
    return $resultPromise;
}

/**
 * SaveToTemp saves content to a temporary file. Returns the temp file path.
 * @param {string} content
 * @returns {Promise<string> & { cancel(): void }}
 */
export function SaveToTemp(content) {
    let $resultPromise = /** @type {any} */($Call.ByID(3175783248, content));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Silence() {
    let $resultPromise = /** @type {any} */($Call.ByID(1348466677));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ToggleHydraWindow() {
    let $resultPromise = /** @type {any} */($Call.ByID(2234515234));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = ugen$0.Knob.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = $Create.Array($Create.Any);
const $$createType4 = $models.OpenFileDialogResponse.createFrom;
const $$createType5 = $Create.Nullable($$createType4);

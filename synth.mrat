;; for map, reduce, etc.
(load-file "./examples/functional.mrat")
(load-file "./examples/notes.mrat")
(load-file "./examples/welsh.mrat")

;; make a bunch of builtins available more concisely
(def ~sin mrat.osc.sin)
(def ~saw mrat.osc.saw)
(def ~sqr mrat.osc.sqr)
(def ~pulse mrat.osc.pulse)
(def ~noise mrat.osc.noise)
(def ~phasor mrat.osc.phasor)

(def print mrat.core.io.print)

(def ~freeverb mrat.effects.freeverb)
(def ~delay mrat.effects.delay)
(def ~clip mrat.effects.clip) ;; should remove from effects
(def ~trand mrat.math.rand.trand)
(def ~env mrat.effects.env) ;; should remove from effects
(def ~lores mrat.effects.~lores) ;; should remove from effects

(def (oscrng osc min max)
  (+ min
     (/ (- max min) 2)
     (* (/ (- max min) 2) osc)))

(def (range beg end)
  (if (or (> beg end) (eq? beg end))
    '()
    (cons beg (range (+ beg 1) end))))

(def bpm (* 3.8 60))

;; (def metro (sqr 3.65))

;; (def pulseDuty (phasor 2))

;; (def voice (vocalMale 440 (sqr 1)))

(def myMetroConfig
  (list :osc (list (list :key :osc1
                         :wave :sqr
                         :duty 0.05
                         :mix 1)
                   (list :key :osc2
                         :wave :sqr
                         :duty 0.5
                         :detune (cents 10)
                         :mix 0.65))
        :lfo (list :route '(:osc1 :freq :osc2 :freq)
                   :wave :tri
                   :freq 2.4
                   :depth (list :freq (cents 10)))
        :lpf (list :cutoff 500
                   :res 0.85)
        :amp (list :attack 0.01
                   :decay  0
                   :sustain 1
                   :release 0.1)))
(def myMetro (mkwelsh myMetroConfig))

(def (second lst) (first (rest lst)))

(def (~mixer chanWeights)
  (let ((totalSum (reduce (fn (acc el) (+ acc (first el))) chanWeights 0)))
    (sum (map
          (fn (el) (* (/ (first el) totalSum) (second el)))
          chanWeights))))

;; (def (harmonikit amps)
;;   (fn (freq)
;;     (let ((sinFn (fn (amp idx) (list amp (~sin (* freq (+ idx 1)))))))
;;       (~mixer (maps sinFn amps (range 0 (length amps)))))))

(def (times value n)
  (if (eq? n 0)
    '()
    (cons value (times value (- n 1)))))


;; (def harmAmps (map-idx (fn (x i) (/ 1 (* x x x))) (range 1 101)))
;; (def myInst (harmonikit harmAmps))

;; (def ~dc (darkCity (+ 260 (* 100 (~noise)))
;;            (~sqr 1)))

;; (def ~reverb (~lores (~freeverb ~dc) 880 0.8))

;; (mrat.core.io.out (~mixer (list (list 16 (acidBass 100 (~sqr 1)))
;;                                 (list 4 ~dc)
;;                                 (list 8 (* (oscrng (~tri 4) 0.1 1) ~reverb)))))


;; (def frequency-multiples (range 1 42))
;; (def (~sins fundamental)
;;   (sum (map (fn (x) (~pulse (* fundamental x))) frequency-multiples)))

;; (mrat.core.io.out
;;  (~sin (oscrng (~sins 0.01) 100 200)))

;; (mrat.core.io.out (~mixer (list
;;                            (list 1 (celestialWash 220 (~pulse 2)))
;;                            (list 1 ~dc)
;;                            (list 1 ~reverb)
;;                            )))

(def (avg lst)
  (* (sum lst)
     (/ 1 (length lst))))

(def (meandering-sound lfo-freq-n lfo-rate)
  (let ((frequency-multiples (range 1 lfo-freq-n)))
    (let ((~sins
           (fn (fundamental)
             (avg (map
                   (fn (x) (* (/ 1.0 1.0) (~pulse (* fundamental x))))
                   frequency-multiples)))))
      (let ((~lfo (~sins lfo-rate)))
        (~saw (oscrng ~lfo 100 1000) :duty (oscrng ~lfo 0.1 0.9))))))

;; (mrat.core.io.out (~lores (meandering-sound 10 0.1) 263 0.99))
(mrat.core.io.out (darkCity 263 (~pulse 1)))

;; (mrat.core.io.out
;;  (let ((phs (~phasor 1)))
;;    (~freeverb
;;     (~mixer (list (list 1 (* phs (meandering-sound 60 8)))
;;                   (list 1 (* (+ -1 phs) (~noise))))))))

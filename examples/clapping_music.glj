(ns examples.clapping-music
  (:require [mrat.core :refer :all] :reload
            [mrat.midi :refer :all] :reload
            [mrat.scales :refer :all] :reload
            [mrat.welsh] :reload))

(def clapping-music-type [ 1   1   1   0    1   1   0    1   0    1   1    0])
(def clapping-music-vals [1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8 1/8])

(defn to-beat
  [tempo onoffs vals]
  (let [secs-per-whole (* tempo 4)
        onoff-val-pairs (map #(if (pos? %1)
                                [[1 0] [(* %2 0.75) (* %2 0.25)]]
                                [[%1] [%2]])
                             onoffs vals)
        [onoffs vals] (reduce (fn [acc ov]
                                [(apply conj (acc 0) (ov 0))
                                 (apply conj (acc 1) (ov 1))])
                              [[] []]
                              onoff-val-pairs)
        durs (map #(* 1.0 (* secs-per-whole %)) vals)]
    (sequencer onoffs durs)))

(def secs-per-quarter 0.25)

(def cm (to-beat secs-per-quarter clapping-music-type clapping-music-vals))

(defn kick
  [gate vari]
  (let [freqs [500 50 10]
        durs [0.01 0.02]
        freq-sweep (env gate freqs durs)
        amp (env-asr gate [0.01 0.8 0.2])]
    (-> (tri freq-sweep :duty 0.75)
        (* amp))))

(defn clap
  [gate vari acc]
  (let [noiz (noise)
        a-env (env-perc gate [0.01 0.2])
        f-env (-> (env-perc gate [0.001 0.2])
                  (* 600)
                  (+ 1100)
                  (- (* vari 100)))
        filt1 (* 0.4 (bpf noiz f-env (- 0.4 (* vari 0.1))))
        filt2 (bpf noiz 1000 0.2)

        amp (+ filt1 filt2)
        amp (* 2 (lores amp 9000 0.8))
        amp (* amp a-env acc)]
    amp))

(def shift-seq
  (sequencer (range 13)
             (repeat 13 10)))

(def clapping-music
  (+ (clap cm 1 1)
     (-> (clap cm 1 1)
         (delayl (* 0 ;; shift-seq
                    (/ secs-per-quarter 2))))))

(play (-> clapping-music))

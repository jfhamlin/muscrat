(ns user
  (:require [mrat.core :refer :all]))

(setcps! (/ (knob "bpm" 138 50 250) 60 4))

(play (-> (smp :kick :trigger (tctrig '[1 _ 1 (_ 1 1)]) :rate (noise-quad 2 :mul 0.1 :add 1) :mul 10)
          tanh
          (* 0.4)))

(play (-> (smp :hat :trigger (tctrig '[_ 1 1]))))

(def pattern '[100 100 200 (200 400) 300 (200 200)])
(def duty-pattern '[0.5 1 0.8 (0.2 0.1) 0.9 (0.75 0.75)])

(let [[freqs ticks] (tcvals pattern)
      [duty] (tcvals duty-pattern)]
  (play (-> (smp :hat :trigger (pulse-div ticks) :rate (* duty) :mul duty)))
  (play (-> (saw freqs :mul 0.1 :duty (env ticks [1 duty 1] [0.05 0.1] :curve [3 -3]))
            (+ (sqr (* (semitones 7) freqs) :duty duty :mul 0.03))
            (* (env-perc ticks [0.05 0.1] :curve [-3 3]))
            (rlpf (knob "cutoff" 5000 100 10000))
            (freeverb :room-size (knob "room size" 0.5 0 1)))))

(play (-> (sin (step *tctick* [237 265 200 200])
               :duty (env *tctick* [1 0.5 0.5 1] [0.01 0.1 0.1] :curve [4 -4])
               :mul (noise-quad 16 :mul 0.3 :add 0.4))
          freeverb))
(play (-> (pink-noise)
          (bpf 5000)
          (* (env-perc *tctick* [0.05 0.2] :curve [4 -4]))
          (* 0.15)))

(ns examples.ihylpr
  "A cover of 'I heard you like polyrhythms' by Virtual Riot
  https://www.youtube.com/watch?v=SthcxWPXG_E"
  (:use [mrat.core]))

(def bps 1.0)

(def speed-factor (knob "speed-factor" 0.005 0.001 0.5 0.001))

(def offset-trig (impulse (/ bps 10)))
(def offset (choose offset-trig [-9 -5 0 3 7 12]))

(def notes
  (map #(+ % offset) [E8 D8 B7 A7 G7 F#7
                      E7 D7 B6 A6 G6 F#6
                      E6 D6 B5 A5 G5 F#5
                      E5 D5 B4 A4 G4 F#4
                      E4 D4 B3    G3
                      E3 D3 B2    G2
                      E2 B1
                      E1]))

(def rand-source (math$rand.NewSource 414)) ;; 214
(def mrand (math$rand.New rand-source))
(def duty (knob "duty" 0.6 0 1))

(def synth-trigs (atom {}))

(defn synth
  [rate note]
  (let [osc (sin (mtof note) :duty duty)
        trig (impulse rate :iphase (.Float64 mrand))
        amp (env trig [0 1 1 0] [0.01 0.02 0.1] :curve [-5 0 5])]
    (swap! synth-trigs assoc (keyword (str "trig" (count @synth-trigs))) trig)
    (* osc amp)))

(def ihylpr
  (-> (map #(synth (/ bps (+ 1 (* speed-factor %1))) %2) (range (count notes)) notes)
      splay
      (* (dbamp (knob "dbs" 0 -50 0)))
      (freeverb :room-size (knob "room-size" 0.5 0 1))))

(play ihylpr)

(def prefix
  '(.. (gradient speed)
       (colorama)
       (kaleid 4)
       (modulate (noise 2))
       ))

(def num-trigs (count @synth-trigs))
(def shapes
  (for [[trigkw i] (map vector (keys @synth-trigs)
                               (range num-trigs))]
    (let [trig-sym (symbol (name trigkw))
          cols 6
          num-rows (int (/ num-trigs cols))
          col (int (mod i cols))
          row (int (/ i cols))
          scale (/ 1 6.0)
          offset (+ -0.5 (* scale 0.5))
          x-scroll (+ offset (* scale col))
          x-scroll (if (= row num-rows) (+ x-scroll (/ scale 2)) x-scroll)
          y-scroll (+ offset (* scale row))]
      (list 'add (list '.. (list 'shape 4 scale)
                           (list 'scroll x-scroll y-scroll)
                           (list 'color x-scroll y-scroll (* 0.5 (+ x-scroll y-scroll))) ;;trig-sym trig-sym trig-sym)
                           ) trig-sym))))

(def suffix
 '((modulate (src o0) duty)
   (out)))

(def render (concat prefix shapes suffix))
(def params
  (merge (into {} (map (fn [[kw trig]] [kw (env trig [0 1 1 0] [0.01 0.1 0.1])]) @synth-trigs))
         {:duty (- 0.13 (* 0.1 duty))
          :color (-> offset (+ 9) (/ 21) (* 2))
          :speed (rrand -1 1 offset-trig)
          :freq (rrand 2 5 offset-trig)}))

(hydra {:render render}
       params)

(ns examples.sunset
  (:use [mrat.core]))

(def melody-amp (* 0.3 (knob "melody" 0.5 0 1)))
(def drone-amp (knob "drone" 0.6 0 1))
(def amp (* 0.8 (knob "amp" 0.5 0 1)))

(def split-cutoff-midi (+ 40 36 (* 40 (knob "split" 0.5 0 1))))

(def res (* 0.95 (knob "res" 0.6 0 1)))

(def hpcutoff (mtof (+ 40 (* 90 (knob "hpcutoff" 0 0 1)))))
(def lpcutoff (mtof (+ 20 (* 110 (knob "lpcutoff" 1 0 1)))))

(def intervals [0 7 0 5 0 10
                0 5 0 3 0 7
                0 7 2 14 0 15
                0 17 0 14 0 19
                0 0 0 0 0 0
                ])

(def root-midi (knob "root-midi" 50 30 70 1))

(def metro-rate (knob "metro" 6 4 6 1))
(def metro (impulse metro-rate))

(def metro-slo (impulse 0.1))

(def notes (map #(+ root-midi
                    (choose metro [0 0 0 0 0 0 0 0 0 0
                                   7 7 7 7 7 7
                                   -12 -12 -12
                                   -5 -5
                                   24 36
                                  ]) %) intervals))
(def note (step metro notes))
(def freq (mtof note))

(def hi-pad
  (-> (sum (map #(sqr % :iphase (math:rand.Float64)) (map #(mtof (+ root-midi 24 %)) [-2 0 7.1 3 12.1 24.1 35.9])))
      (* 0.2)
      (lores (mtof (+ root-midi 12 24 (lfpulse 1/8 :mul 24))) res)
      (* (env-adsr metro-slo [1 2 0.5 6]))
      (combc 0.25 0.175 4)))

(def drone (-> hi-pad
               (rhpf (mtof (+ split-cutoff-midi 12)))
               (pan2 (sin 2 :mul (line 0 1 240)) :mul drone-amp)))

(play (-> (-> (saw freq :duty (sin (* 5.025 freq) :mul 0.2 :add 0.8))
              (* (env-adsr metro [0.01 0.05 0.7 0.5]))
              (combc 1 0.25 (line 0 5 60))
              (* melody-amp)
              (rlpf (mtof (- split-cutoff-midi 12))))
          (+ drone)
          (* amp)
          (rlpf lpcutoff 1)
          (rhpf hpcutoff 1)
          (+ (-> (pink-noise)
                 (bpf 300 0.15) ;;(* freq (choose metro [0.25 0.5 2 4])) 0.2)
                 (* (env-perc metro [0.01 0.05]))
                 (combc 2 0.2 0.5)
                 (* 0.8)
                 (* (noise-quad 4 :mul 0.3 :add 0.7))))
          (freeverb :room-size 0.6)
          limiter))

(hydra {:render '(.. (osc freq rate)
                     (color r g b)
                     (contrast contrast)
                     (add (.. (src o0) (modulate o0 0.04)) 1)
                     (kaleid)
                     (rotate 1 10)
                     (out))}
       {:freq (* 10 (exp (/ metro-rate 5)))
        :rate (* 0.1 (exp (/ metro-rate 5)))
        :contrast (-> (-> note (- 24) (/ root-midi)) (+ 1))
        :r (-> note (- 24) (/ root-midi))
        :g (* 2 (amplitude (sum drone)))
        :b (/ (- root-midi 30) 30)})

;; for map, reduce, etc.
(load-file "./functional.mrat")
(load-file "./notes.mrat")

;; make a bunch of builtins available more concisely
(def sin mrat.osc.sin)
(def saw mrat.osc.saw)
(def sqr mrat.osc.sqr)
(def noise mrat.osc.noise)
(def print mrat.core.io.print)
(def freeverb mrat.effects.freeverb)
(def delay mrat.effects.delay)
(def clip mrat.effects.clip)
(def mixer mrat.effects.mixer)
(def trand mrat.math.rand.trand)
(def env mrat.effects.env)

;; trigger for playing a note. square wave with 4 impulses per second.
(def noteGate (sqr 4))

;; note envelope, attack, decay, release.
(def envelope (env noteGate (list 0 1 1 0) (list 0.01 0.05 0.02)))

;; trigger for starting the noise generator.
(def noiseGate (sqr 10))

;; pick a random frequency between 263hz and 1500hz, exponentially
;; distributed to account for logarithmic perception of frequency.
(def w (trand (sqr 2) C2 C4 :exp) )

;; square wave with frequency w. wave duty cycle is modulated by the
;; same envelope used to play it, so the louder it gets, the greater
;; the duty cycle.
(def note
    (sqr w))
;;         (env noteGate (list 0.01 0.5) (list 0.05))))

(def playedNote (* envelope note))
(def noteRounds
    (mixer playedNote
           ;; play the same exact pattern as playedNote three more
           ;; times, but with delays. this is like playing in rounds.
           (delay playedNote 2.5)
           (delay playedNote 3.5)
           (delay playedNote 4.5)
           ;; add some slowly growing noise to the mix.
           (* (env noiseGate (list 0.001 0.5 1 2 3 0) (list 5 10 15 2 0.1) :exp) (noise))
           ))

(def mixed
    (mixer noteRounds
           ;; reverberated version of the note rounds.
           (freeverb noteRounds)
           ))

(def gain 0.5)
;; (mrat.core.io.out (* gain mixed))
(mrat.core.io.out (* gain mixed))

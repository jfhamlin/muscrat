(load-file "./functional.mrat")

;;; Make some functions easier to use.
(def sin mrat.osc.sin)
(def saw mrat.osc.saw)
(def sqr mrat.osc.sqr)
(def tri mrat.osc.tri)
(def noise mrat.osc.noise)

(def ~lores mrat.effects.~lores)
(def ~env mrat.effects.env)
(def clip mrat.effects.clip)

(def print mrat.core.io.print)

;;; Sawtooth wave but with a duty cycle parameter.
(def (sawduty w duty)
  (let ((min (+ 1 (* -2 (clip duty 0 1))))
        (max 1))
    (clip (saw w) min max)))

;;; TODO: move to a library for music theory.
(def (cents x) (pow 2 (/ x 1200)))
(def (semitones x) (pow 2 (/ x 12)))
(def (octaves x) (pow 2 x))

;;; These should be in the standard library.
(def nil '())
(def (nil? x) (eq? x nil))

;;; Helpers for grabbing key-value pairs from a list.
(def (getval lst key)
  (if (nil? lst)
    nil
    (if (eq? (first lst) key)
      (first (rest lst))
      (getval (rest lst) key))))

(def (getvaldef lst key def)
  (let ((v (getval lst key)))
    (if (nil? v)
      def
      v)))

;;; Generate sounds from configurations
(def (mklpf cfg)
  (let ((cutoff (getvaldef cfg :cutoff 1000))
        (res (getvaldef cfg :res 0)))
    (fn (in) (~lores in cutoff res))))

;;; Make an amplitude envelope constructor from a configuration. The
;;; returned constructor takes a gate signal and returns an envelope
;;; generator that is triggered by the gate.
(def (mkamp cfg)
  (let ((attack (getvaldef cfg :attack 0))
        (decay (getvaldef cfg :decay 0))
        (sustain (getvaldef cfg :sustain 0))
        (release (getvaldef cfg :release 0)))
    (fn (gate) (~env gate (list 0 1 0) (list attack decay))))) ;; TODO: implement a real ADSR env


(def (mkosc cfg)
  (let ((oscs (map mkosc* cfg)))
    (fn (w lfoinfo) (sum (map (fn (o) (o w lfoinfo)) oscs)))))

;;; If the LFO is configured to target this oscillator's duty cycle,
;;; return the modulated duty cycle. Otherwise, return the original.
(def (lfoduty lfoinfo key duty)
  (let ((lfocfg (getval lfoinfo :cfg)))
    (let ((route (getval (getval lfocfg :route) key)))
      (if (or (nil? route) (not (eq? route :duty)))
        duty
        (let ((~lfo (getval lfoinfo :lfo))
              (depth (getval lfocfg :depth)))
          (* (+ 1 (* depth ~lfo)) duty))))))

;;; Make an oscillator constructor from a configuration.
(def (mkosc* cfg)
  (let ((wave (getvaldef cfg :wave :tri))
        (duty (getvaldef cfg :duty 0.5))
        (mix (getvaldef cfg :mix 1))
        (detune (getvaldef cfg :detune 1)))
    (fn (w lfoinfo)
      (let ((w (* w detune)))
        (let ((duty (lfoduty lfoinfo (getval cfg :key) duty)))
        (* mix (case wave
                 :tri (tri w)
                 :sqr (sqr w duty)
                 :saw (sawduty w duty)
                 :sin (sin w)
                 :noise (noise))))))))

;;; Make a low-frequency oscillator constructor from a configuration.
(def (mklfo cfg)
  (if (nil? cfg)
    nil
    (let ((wave (getvaldef cfg :wave :tri))
          (duty (getvaldef cfg :duty 0.5))
          (w (getval cfg :freq)))
      (fn () (case wave
               :tri (tri w)
               :sqr (sqr w duty)
               :saw (saw w)
               :sin (sin w)
               :noise (noise))))))

(def (lfofreq lfoinfo w)
  (let ((lfocfg (getval lfoinfo :cfg)))
    (if (nil? (getval lfocfg :freq))
        w
        (let ((~lfo (getval lfoinfo :lfo))
              (depth (getval lfocfg :depth)))
          (+ (* depth ~lfo) w)))))

;;; Make a sound generator from a configuration. Configuration
;;; structure is defined in Fred Welsh's "Welsh's Synthesizer
;;; Cookbook."
(def (mkwelsh cfg)
  (let ((osccfg (getval cfg :osc))
        (lpfcfg  (getval cfg :lpf))
        (ampcfg  (getval cfg :amp))
        (lfocfg  (getval cfg :lfo)))
    (let ((~lpf (mklpf lpfcfg))
          (~osc (mkosc osccfg))
          (~amp (mkamp ampcfg))
          (~lfo (mklfo lfocfg)))
      (fn (w gate)
        (let ((lfoinfo (list :lfo (~lfo) :cfg lfocfg)))
          (* (~amp gate) (~lpf (~osc (lfofreq lfoinfo w) lfoinfo)))
          )
        )
      )
    )
  )

;;; TODO: i have no idea what the envelope value on the low-pass
;;; filter is for.

;;; Configurations and sample generator constructors.

(def bongoConfig
  (list :osc (list (list :key :osc1
                         :wave :tri
                         :mix 1)
                   (list :key :osc2
                         :wave :sqr
                         :mix 0.65))
        :lpf (list :cutoff 600
                   :res 0
                   :env 0.6)
        :amp (list :attack 0.0001
                   :decay 0.22
                   :sustain 0
                   :release 0.22)))
(def bongo (mkwelsh bongoConfig))

;;; TODO: expose controls for modulating the cutoff frequency
;;; dynamically.
(def acidBassConfig
  (list :osc (list (list :key :osc1
                         :wave :sqr
                         :duty 0.25
                         :detune (cents 10)
                         :mix 0.7)
                   (list :key :osc2
                         :wave :sqr
                         :mix 1
                         :detune (* (octaves -2) (cents -10))))
        :lpf (list :cutoff 450
                   :res 0.6)
        :amp (list :attack 0.0001
                   :decay 0.45
                   :sustain 0.15
                   :release 0.26)))
(def acidBass (mkwelsh acidBassConfig))

;;; Dark Knight vibes.
(def darkCityConfig
  (list :osc (list (list :key :osc1
                         :wave :sqr
                         :duty 0.5
                         :detune (octaves -2)
                         :mix 1)
                   (list :key :osc2
                         :wave :saw
                         :detune (* (semitones -11) (cents -92))
                         :mix 1))
        :lfo (list :route '(:osc1 :duty :osc2 :duty)
                   :wave :sin
                   :freq 4
                   :depth 0.45) ;; TODO: confirm that we're interpreting this correctly for the duty cycle
        :lpf (list :cutoff 300
                   :res 0)
        :amp (list :attack 0.0001
                   :decay 3.9
                   :sustain 0.7
                   :release 6.35)))
(def darkCity (mkwelsh darkCityConfig))

(def vocalFemaleConfig
  (list :osc (list (list :key :osc1
                         :wave :sqr
                         :duty 0.05
                         :mix 1)
                   (list :key :osc2
                         :wave :sqr
                         :duty 0.25
                         :mix 0.65))
        :lfo (list :route '(:freq :freq)
                   :wave :tri
                   :freq 2.4
                   :depth (cents 20))
        :lpf (list :cutoff 1200
                   :res 0.5)
        :amp (list :attack 0.32
                   :decay  1 ;; author suggestion is max?
                   :sustain 1
                   :release 0.93)))
(def vocalFemale (mkwelsh vocalFemaleConfig))

(def vocalMaleConfig
  (list :osc (list (list :key :osc1
                         :wave :sqr
                         :duty 0.15
                         :detune (octaves -1)
                         :mix 1)
                   (list :key :osc2
                         :wave :sqr
                         :duty 0.25
                         :mix 0.9)) ;; TODO: mix in decibels, not absolute percentages...
        :lfo (list :route '(:freq :freq)
                   :wave :tri
                   :freq 2.4
                   :depth (cents 20))
        :lpf (list :cutoff 1200
                   :res 0)
        :amp (list :attack 0.32
                   :decay  1 ;; author suggestion is max?
                   :sustain 1
                   :release 0.93)))
(def vocalMale (mkwelsh vocalMaleConfig))

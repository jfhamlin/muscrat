(ns karplus_strong
      (:require [mrat.core :refer :all]))

(defn supersaw
  "SuperSaw (Roland JP-8000 and JP-8080)

  Ported from https://gist.github.com/audionerd/fe50790b7601cba65ddd855caffb05ad"
  ([freq] (supersaw freq 0.75))
  ([freq mix] (supersaw freq mix 0.75))
  ([freq mix detune]
   (letfn [(detune-curve [x]
             (+ (* 10028.7312891634 (pow x 11))
                (* -50818.8652045924 (pow x 10))
                (* 111363.4808729368 (pow x 9))
                (* -138150.6761080548 (pow x 8))
                (* 106649.6679158292 (pow x 7))
                (* -53046.9642751875 (pow x 6))
                (* 17019.9518580080 (pow x 5))
                (* -3425.0836591318 (pow x 4))
                (* 404.2703938388 (pow x 3))
                (* -24.1878824391 (pow x 2))
                (* 0.6717417634 x)
                0.0030115596))
           (center-gain [x] (+ (* -0.55366 x) 0.99785))
           (side-gain [x] (+ (* -0.73764 (pow x 2)) (* 1.2841 x) 0.044372))]
     (let [center (saw freq :iphase (math$rand.Float64))
           detune-factor (* freq (detune-curve detune))
           freqs [(+ freq (* detune-factor 0.11002313))
                  (+ freq (* detune-factor 0.06288439))
                  (+ freq (* detune-factor 0.01952356))
                  (+ freq (* detune-factor 0.01991221))
                  (+ freq (* detune-factor 0.06216538))
                  (+ freq (* detune-factor 0.10745242))]
           side (sum (map #(saw % :iphase (math$rand.Float64)) freqs))
           sig (+ (* center (center-gain mix)) (* side (side-gain mix)))]
        sig))))


(def fade-in-time 60)

(def metro (impulse 10))
(def metro-bass (impulse 5))
(def metro-kick (impulse 2.5))

(def burst (-> (pink-noise)
               (* (env-adsr metro [0.001 0.001 1 0.001]))
               (* 1)))

(def feedback (pipe))

(def delay-filter
  (-> feedback
      (delayc 0.5 (step metro [0.0001 0.002 0.001 0.01 0.0015 0.0019]))
      (lores 1000 0)
      (* (sin 4 :mul 0.02 :add 0.98))))

(pipeset! feedback (+ burst delay-filter))

(play (-> feedback
          ;;(* (sin 0.1 :mul 20 :add 25))
          wfold
          (* 0)
          (loshelf 20 :db -20)
          (rhpf 1200)
          (hishelf 12000 :db -90)
          limiter))

(def bass-line [0 2 7 3 12 10 0 2 3 11])
(defn bass-synth
  [gate freq]
  (let [osc (supersaw freq 0.75 0.7)
        amp (env gate [0.0001 1 1 0.0001] [0.01 0.1 0.01] :interp :exp)
        hicut (* freq 8)
        locut (* freq 1)
        cutoff (env gate [locut hicut hicut locut] [0.02 0.08 0.01] :interp :exp)]
      (-> osc
          (* 0.1)
          (rlpf cutoff 0.2)
          (* amp))))

(play (-> (bass-synth metro-bass (step metro-bass (map #(mtof (+ F1 %)) bass-line)))
          (* 0.8)))

(play (-> (play-buf :bass_thick_c :trigger metro-kick :rate 0.5)
          (rlpf 800 0.4 :mul 0.75)))

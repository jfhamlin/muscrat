(ns examples.feedback
  (:require [mrat.core :refer :all] :reload
            [mrat.midi :refer :all]))

(def trig (sqr 8))
(def trig-half (sqr 4))

(def melody (sequencer trig [C3 G3 Eb3 Bb3 C3 A4
                             C3 G3 Eb3 Bb3 C3 D6
                             C3 G3 Eb3 Bb3 C3 Bb5
                             C3 G3 Eb3 Bb3 C3 0]))

(def sig
  (* (-> (* 0.5 (+ (tri melody) (sin melody)))
         (wfold -1 0.5)
         (lores (* 4 melody) 0))
     (env trig [0.0001 1 0.0001] [0.01 0.4] :interp :exp)))

(def drone
  (-> (sqr C2 :duty (sin 4 :mul 0.05 :add 0.15))
      (* (env trig-half [0.2 1 0.2] [0.1 0.1] :interp :exp))
      (lores C3 0.6)))

(def p (pipe))

(def mixed
  (+ (* 0.75 sig)
     (* 0.25 p)))

(pipeset! p
          (-> (delayl mixed 0.2)
              (lores (* 4 melody) (sin 1 :mul 0.4 :add 0.4))
              (freeverb)))

(def kick
  (let [freq C2
        kps 4
        trig (sqr kps)]
    (-> (sin freq)
        (delayl (env trig [0 0.3 0] [0.12 0.1]))
        (lores (* 4 freq) 0)
        (* (env trig [0 1 0 0] [0.01 0.11 0.1])))))

(def out
  (let [amp (decibels -5)
        melody (* mixed (decibels (env 1 [-100 0 0 -100] [16 120 10])))
        drone (* drone (decibels (env 1 [-20 -5 0 -100] [16 120 10])))
        kick (* kick (decibels (env 1 [-100 -100 0 0 -100] [30 1 104 10])))]
    (* amp
       (+ melody
          (pan2 (* 0.2 drone) 0.5)
          (pan2 kick -0.1 1.5)))))

;; (wavout out :filename "./feedback.wav")
(play out)


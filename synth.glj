(ns synth
  (:require [mrat.core :refer :all] :reload
            [mrat.midi :refer :all]
            [mrat.scales :refer :all]))

(def root G3)

(def note-len 0.1125)

(def melody [1 7 3 0 5 8 7 10])

(def melody-seq (sequencer (map #(* root (semitones %)) melody)
                           (repeat 5 note-len)))

(def num-voices 5)

(def midi-kb (midi-in "kb1" :voices num-voices))
(def midi-voice (first midi-kb))

(defn instrument
  [freq gate]
  (-> (sum (map #(wfold (* 2.5 (sin (* (semitones %) freq))) -1 0.2) [0 3 7 10 2 -12]))
      (* (env gate [0 1 1 0] [0.1 2 3]))
      (lores (* (sin 0.2 :mul 5 :add 6) root) 0.8)
      (freeverb :room-size 0.1)
      (pan2 (sin 1 :mul 0.5))))

;; (play (* (decibels -50)
;;          (sum (map #(instrument ((nth midi-kb %) 0) ((nth midi-kb %) 1)) (range num-voices)))))

(play (* (decibels -20)
         (sum (map #(instrument (% 0) (% 1)) midi-kb))))


         ;; (-> (sum (map #(wfold (* 2.5 (sin (* (semitones %) (midi-voice 0)))) -1 0.2) [0 3 7 10 2 -12]))
         ;;     ;;(* (sqr (/ 1.0 note-len) :mul 0.5 :add 0.5 :duty 0.9))
         ;;     (* (midi-voice 1))
         ;;     (lores (* (sin 0.2 :mul 5 :add 6) root) 0.8)
         ;;     (freeverb :room-size 0.1)
         ;;     (pan2 (sin 1 :mul 0.5)))))

;;(play (sin (midi-kb 0)))
